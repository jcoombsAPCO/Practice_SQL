
This document is a how-to guide for setting up different libraries for use in future projects

ALEMBIC:
---------
1) Create the migration environment in the terminal - should only need to be done the first time it is used
    pip install alembic 
    alembic init myEnv 
    *** The folder named 'alembic' inside TSUNAMI-PostgrESQL-Demo is created from this command

2) Tell alembic how to connect to the database
    - Inside alembic.ini file, change the sqlalchemy.url from
        postgresql://username:password@localhost:port/databaseName
      (this will likely be turned into a key on the .env file)

3) Create a models.py or schemas.py
    - Install the following package:
        from sqlalchemy.ext.declarative import declarative_base
        from sqlalchemy import Column, String, Date, Integer
    - And define the Base as:
        Base = declarative_base()
    - Build SQLmodels with the example syntax:
        class Album(Base)
            __tablename__ = 'Albums'
             id = Column(Integer, primary_key=True)
            title = Column(String, nullable=False)
            release = Column(Date, nullable=False)

4) Make revisions to the database in the terminal with the command
    alembic -m "Here will be where the messages that describe the changes are contained"
    - If step (3) is completed correctly, then code should be autogenerated in alembic>versions>(id of migration)
    - This code can be adjusted to meet the specifications of the migration

5) Upgrade or downgrade the current revision of the database
    - To update the database to the most current revision:
        alembic upgrade head
    - To move forward one revision:
        alembic upgrade +1
    - To move backward one revision:
        alembic downgrade -1



PostgreSQL
-----------
1) Install PostgreSQL through the command terminal:
        sudo apt install postgresql postgresql-contrib
    - To open postgreSQL inside the command prompt to visualize tables in database, use the default username:
        sudo -i -u postgres 

2) Install the library for performing operations in PostgreSQL:
        pip install psycopg2-binary
    - Inisde of a main.py script at the top:
        import psycopg2
        from sqlmodel import Session
        from sqlalchemy import create_engine
        from sqlalchemy.orm import sessionmaker

3) The following lines of code in main.py are necessary to access, make changes, and read items in the database
    - The same DATABASE_URL from step (2) of ALEMBIC is used:
        
        engine = create_engine(DATABASE_URL)
        SessionLocal = sessionmaker(bind=engine)
        Base.metadata.create_all(bind=engine)
                        
        def get_session():
            db = SessionLocal()
            try:
                yield db
            finally:
                db.close()

4) In every CRUD request with fastAPI, the following must be passed to the function handle
    - The session. acts the same as a cursor in SQLite
        session: Session = Depends(get_session)